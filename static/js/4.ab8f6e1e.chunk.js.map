{"version":3,"sources":["logic/operate.js","components/Calculator/Calculator.js","logic/calculate.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","Calculator","props","state","total","next","e","obj","buttonName","x","this","match","parseFloat","includes","setState","className","type","value","onClick","stateMod","React","Component"],"mappings":"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","file":"static/js/4.ab8f6e1e.chunk.js","sourcesContent":["import Big from 'big.js';\r\n\r\nexport default function operate(numberOne, numberTwo, operation) {\r\n  const one = Big(numberOne);\r\n  const two = Big(numberTwo);\r\n  if (operation === '+') {\r\n    return one.plus(two).toString();\r\n  }\r\n  if (operation === '-') {\r\n    return one.minus(two).toString();\r\n  }\r\n  if (operation === 'x') {\r\n    return one.times(two).toString();\r\n  }\r\n  if (operation === 'รท') {\r\n    try {\r\n      return one.div(two).toString();\r\n    } catch (err) {\r\n      return \"Can't divide by 0.\";\r\n    }\r\n  }\r\n  if (operation === '%') {\r\n    return one.mod(two).toString();\r\n  }\r\n  throw Error(`Unknown operation '${operation}'`);\r\n}\n","import React from 'react';\r\nimport './Calculator.css';\r\nimport calculate from '../../logic/calculate';\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      total: '',\r\n      next: '',\r\n      operation: '',\r\n    };\r\n  }\r\n\r\n  stateMod(e) {\r\n    const x = calculate(this.state, e);\r\n    this.setState(() => ({\r\n      total: x.total,\r\n      next: x.next,\r\n      operation: x.operation,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calculator\" data-testid=\"Calculator\">\r\n        <input className=\"w-100 button-border border-0 bg-secondary text-light screen pe-1 ps-1\" type=\"text\" value={this.state.next} />\r\n        <div className=\"w-100\">\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('AC')}><small>AC</small></button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('+/-')}>&#177;</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('%')}>%</button>\r\n          <button className=\"button-border col-3 border-1 bg-warning\" type=\"button\" onClick={() => this.stateMod('รท')}>&#247;</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('7')}>7</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('8')}>8</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('9')}>9</button>\r\n          <button className=\"button-border col-3 border-1 bg-warning\" type=\"button\" onClick={() => this.stateMod('x')}>x</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('4')}>4</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('5')}>5</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('6')}>6</button>\r\n          <button className=\"button-border col-3 border-1 bg-warning\" type=\"button\" onClick={() => this.stateMod('-')}>-</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('1')}>1</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('2')}>2</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('3')}>3</button>\r\n          <button className=\"button-border col-3 border-1 bg-warning\" type=\"button\" onClick={() => this.stateMod('+')}>+</button>\r\n          <button className=\"button-border col-6 border-1\" type=\"button\" onClick={() => this.stateMod('0')}>0</button>\r\n          <button className=\"button-border col-3 border-1\" type=\"button\" onClick={() => this.stateMod('.')}>.</button>\r\n          <button className=\"button-border col-3 border-1 bg-warning\" type=\"button\" onClick={() => this.stateMod('=')}>=</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import operate from './operate';\r\n\r\nfunction isNumber(item) {\r\n  return !!item.match(/[0-9]+/);\r\n}\r\n\r\n/**\r\n * Given a button name and a calculator data object, return an updated\r\n * calculator data object.\r\n *\r\n * Calculator data object contains:\r\n *   total:s      the running total\r\n *   next:String       the next number to be operated on with the total\r\n *   operation:String  +, -, etc.\r\n */\r\nexport default function calculate(obj, buttonName) {\r\n  if (buttonName === 'AC') {\r\n    return {\r\n      total: '',\r\n      next: '',\r\n      operation: '',\r\n    };\r\n  }\r\n\r\n  if (isNumber(buttonName)) {\r\n    // If there is an operation, update next\r\n    if (obj.operation) {\r\n      if (obj.next) {\r\n        return { ...obj, next: obj.next + buttonName };\r\n      }\r\n      return { ...obj, next: buttonName };\r\n    }\r\n    // If there is no operation, update next and clear the value\r\n    if (obj.next) {\r\n      return {\r\n        next: parseFloat(obj.next + buttonName, 10).toString(),\r\n        total: null,\r\n      };\r\n    }\r\n    return {\r\n      next: buttonName,\r\n      total: null,\r\n    };\r\n  }\r\n\r\n  if (buttonName === '.') {\r\n    if (obj.next) {\r\n      if (obj.next.includes('.')) {\r\n        return { ...obj };\r\n      }\r\n      return { ...obj, next: `${obj.next}.` };\r\n    }\r\n    if (obj.operation) {\r\n      return { next: '0.' };\r\n    }\r\n    if (obj.total) {\r\n      if (obj.total.includes('.')) {\r\n        return {};\r\n      }\r\n      return { total: `${obj.total}.` };\r\n    }\r\n    return { total: '0.' };\r\n  }\r\n\r\n  if (buttonName === '=') {\r\n    if (obj.next && obj.operation) {\r\n      return {\r\n        total: null,\r\n        next: operate(obj.total, obj.next, obj.operation),\r\n        operation: null,\r\n      };\r\n    }\r\n    // '=' with no operation, nothing to do\r\n    return {\r\n      total: obj.total,\r\n      next: obj.next,\r\n      operation: obj.operation,\r\n    };\r\n  }\r\n\r\n  if (buttonName === '+/-') {\r\n    if (obj.next) {\r\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\r\n    }\r\n    if (obj.total) {\r\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  // Button must be an operation\r\n\r\n  // When the user presses an operation button without having entered\r\n  // a number first, do nothing.\r\n  // if (!obj.next && !obj.total) {\r\n  //   return {};\r\n  // }\r\n\r\n  // User pressed an operation after pressing '='\r\n  if (!obj.next && obj.total && !obj.operation) {\r\n    return { ...obj, operation: buttonName };\r\n  }\r\n\r\n  // User pressed an operation button and there is an existing operation\r\n  if (obj.operation) {\r\n    if (obj.total && !obj.next) {\r\n      return { ...obj, operation: buttonName };\r\n    }\r\n\r\n    return {\r\n      total: operate(obj.total, obj.next, obj.operation),\r\n      next: null,\r\n      operation: buttonName,\r\n    };\r\n  }\r\n\r\n  // no operation yet, but the user typed one\r\n\r\n  // The user hasn't typed a number yet, just save the operation\r\n  if (!obj.next) {\r\n    return { operation: buttonName };\r\n  }\r\n\r\n  // save the operation and shift 'next' into 'total'\r\n  return {\r\n    total: obj.next,\r\n    next: null,\r\n    operation: buttonName,\r\n  };\r\n}\r\n"],"sourceRoot":""}